* Key bindings
** Commenting
   I like to use C-x / for comment/uncommenting
#+begin_src emacs-lisp
(global-set-key (kbd "C-x /") 'comment-or-uncomment-region)
#+end_src

** Goto symbol
   C-x C-i for jumping to a symbol
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-i") 'ido-goto-symbol)
#+end_src

** Enter key in ruby-mode
   When doing Ruby, bind <ret> to =reindent-then-newline-and-indent=

   #+begin_src emacs-lisp
  (defun zmalltalker/ruby-comment-indent ()
    (comment-indent-new-line)
  )
  (defun zmalltalker/ruby-indent ()
    (reindent-then-newline-and-indent)
  )
  (defun zmalltalker/ruby-flexible-newline ()
    "Newline function based on the contents of the current line.
  If current line is a comment, add a newline and begin with comment sign.
  Otherwise do a newline-and-indent thing"
    (interactive)
    (if (zmalltalker/ruby-at-comment-line)
        (zmalltalker/ruby-comment-indent)
      (zmalltalker/ruby-indent)
      )
    )
  (defun zmalltalker/ruby-at-comment-line ()
    (save-excursion
     (back-to-indentation)
     (looking-at "#")
     )
  )



  (defun zmalltalker/ruby-config ()
    (local-set-key (kbd "RET") 'zmalltalker/ruby-flexible-newline)
  )
  (add-hook 'ruby-mode-hook 'zmalltalker/ruby-config)
   #+end_src

** Move line/region up/down
#+BEGIN_SRC emacs-lisp
  (defun move-line (n)
    "Move the current line up or down by N lines."
    (interactive "p")
    (setq col (current-column))
    (beginning-of-line) (setq start (point))
    (end-of-line) (forward-char) (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; restore point to original column in moved line
      (forward-line -1)
      (forward-char col)))

  (defun move-line-up (n)
    "Move the current line up by N lines."
    (interactive "p")
    (move-line (if (null n) -1 (- n))))

  (defun move-line-down (n)
    "Move the current line down by N lines."
    (interactive "p")
    (move-line (if (null n) 1 n)))nil
  (defun move-region (start end n)
    "Move the current region up or down by N lines."
    (interactive "r\np")
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (let ((start (point)))
        (insert line-text)
        (setq deactivate-mark nil)
        (set-mark start))))

  (defun move-region-up (start end n)
    "Move the current line up by N lines."
    (interactive "r\np")
    (move-region start end (if (null n) -1 (- n))))

  (defun move-region-down (start end n)
    "Move the current line down by N lines."
    (interactive "r\np")
    (move-region start end (if (null n) 1 n)))

  (defun move-line-region-up (start end n)
    (interactive "r\np")
    (if (region-active-p) (move-region-up start end n) (move-line-up n)))

  (defun move-line-region-down (start end n)
    (interactive "r\np")
    (if (region-active-p) (move-region-down start end n) (move-line-down n)))

  (global-set-key (kbd "M-<up>") 'move-line-region-up)
  (global-set-key (kbd "M-<down>") 'move-line-region-down)
#+END_SRC
** Hippie-expand
   C-esc for hippie-expand
#+begin_src emacs-lisp
(global-set-key (kbd "C-<escape>") 'hippie-expand)
#+end_src
** Bind align-regexp "=" for fun and profit
** C-c w to store an org link
#+begin_src emacs-lisp
(global-set-key (kbd "C-c w") 'org-store-link)
#+end_src
* Defined elsewhere
** Tags
   [[file:tags.org::*Key%20bindings][Key bindings for tags]]
** Expand region
   [[file:~/.emacs.d/marius.org::*Expand%20region][Expand region]]
** Open recent files
   [[file:~/.emacs.d/marius.org::*Recent%20files][Recent files]]
