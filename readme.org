* My .emacs.d

  I'm experimenting with using org-mode to handle my .el files.
  I use my setup with emacs 24.

** Where are the .el files?
   
   You'll notice that this git repository doesn't include any .el
   files, except init.el. In fact, you'll find that .gitignore
   instructs Git to ignore several .el files; they are generated by
   org-mode from init.el. When you start Emacs, they will be generated
   and read by Emacs.

** Why would I do this?

   The first years I used Emacs, I kept my configuration in ~/.emacs -
   which soon became a mess. As I grew a bit more confident with
   emacs-lisp I split my single .emacs into several files, and
   required these. 

   Then along came Textmate, and I pretty much forgot about Emacs
   until I discovered the Emacs starter kit which provided me with an
   Emacs environment out of the box that completely blew me away. I
   haven't touched Textmate since.

   The problem with using code you don't know is that there's bound to
   be stuff in there that you don't understand. Since I don't like
   working with code I don't understand I stopped maintaining my Emacs
   configuratio, which means I don't use Emacs as efficently as I
   could - which defeats the purpose of using Emacs. 

   So I'm back to writing my Emacs configuration by hand. 

** What was the problem?

   I'd put emacs-lisp comments in my .el files, but like all other
   comments you risk not updating them as you change stuff, and end up
   with comments that are obviously false:

#+BEGIN_EXAMPLE
     ;; I found some awesome snippets for Ruby on the web
     (require 'yasnippets)
#+END_EXAMPLE

   What can I say? This sucks.

   So instead of pretending I'd maintain comments, I decided to turn
   things around. Rather than start by adding code and then write
   comments to help me remember what I intended to achieve when I
   revisit the file in a hundred years, I'd start by describing what I
   wanted to achieve and write the code implementing it
   afterwards. Since I do most all of my writing in org-mode, what
   would be better than to use org-mode to describe my intentions and
   then support it with elisp code blocks embedded in the .org file.

   You're currently looking at the result.
