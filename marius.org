b#+TITLE:     marius.org
#+AUTHOR:    Marius Mathiesen
#+EMAIL:     zmalltalker@zmalltalker.com
#+DATE:      2012-07-06 Fri
#+DESCRIPTION: My emacs configuration
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

* Dot emacs, literate style

  This file is loaded from init.el after any .org files in extras/
  This is because we want to be able to use libraries from there from this file.

** Ido
    Ido improves all kind of minibuffer activities:
    - find-file
    - switch-buffer
      
    with case-insensitivity and all kinds of wonderful things. Let's
    load it up: 

#+begin_src emacs-lisp
(load-library "ido")
(ido-mode)
#+end_src

*** Jump to symbol support
    Jump to a symbol (function, class etc.) with completion. 
    No textmate required

#+begin_src emacs-lisp
(defun ido-goto-symbol (&optional symbol-list)
      "Refresh imenu and jump to a place in the buffer using Ido."
      (interactive)
      (unless (featurep 'imenu)
        (require 'imenu nil t))
      (cond
       ((not symbol-list)
        (let ((ido-mode ido-mode)
              (ido-enable-flex-matching
               (if (boundp 'ido-enable-flex-matching)
                   ido-enable-flex-matching t))
              name-and-pos symbol-names position)
          (unless ido-mode
            (ido-mode 1)
            (setq ido-enable-flex-matching t))
          (while (progn
                   (imenu--cleanup)
                   (setq imenu--index-alist nil)
                   (ido-goto-symbol (imenu--make-index-alist))
                   (setq selected-symbol
                         (ido-completing-read "Symbol? " symbol-names))
                   (string= (car imenu--rescan-item) selected-symbol)))
          (unless (and (boundp 'mark-active) mark-active)
            (push-mark nil t nil))
          (setq position (cdr (assoc selected-symbol name-and-pos)))
          (cond
           ((overlayp position)
            (goto-char (overlay-start position)))
           (t
            (goto-char position)))))
       ((listp symbol-list)
        (dolist (symbol symbol-list)
          (let (name position)
            (cond
             ((and (listp symbol) (imenu--subalist-p symbol))
              (ido-goto-symbol symbol))
             ((listp symbol)
              (setq name (car symbol))
              (setq position (cdr symbol)))
             ((stringp symbol)
              (setq name symbol)
              (setq position
                    (get-text-property 1 'org-imenu-marker symbol))))
            (unless (or (null position) (null name)
                        (string= (car imenu--rescan-item) name))
              (add-to-list 'symbol-names name)
              (add-to-list 'name-and-pos (cons name position))))))))
#+end_src

** Emacs server mode
   Let's support emacsclient. For that to work, we'll need to start the server.
   Unless, of course, it's already running

#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p) (server-start))
#+end_src

** Blogging from org
   Apparently, we need to set up the project list

#+begin_src emacs-lisp
    (setq org-export-html-postamble-format '(("en" " <div id=\"disqus_thread\"></div><script type=\"text/javascript\" src=\"http://disqus.com/forums/zmalltalker/embed.js\"></script><noscript><a href=\"http://zmalltalker.disqus.com/?url=ref\">View the discussion thread.</a></noscript><a href=\"http://disqus.com\" class=\"dsq-brlink\">blog comments powered by <span class=\"logo-disqus\">Disqus</span></a><p id=\"byline\">Written on %d by %a</p>")))
      (setq org-publish-project-alist 
            '(("blogg"
               :base-directory "/home/marius/Projects/blog/orgfiles" 
               :publishing-directory "/home/marius/Projects/blog/output"
               :headline-levels 3
               :recursive t
               :table-of-contents nil
               :style "<link rel=\"stylesheet\" href=\"zlog.css\" type=\"text/css\"/>"
               :html-preamble nil
               :html-postamble t
               :section-numbers nil
               :auto-sitemap t
               )
              ("images"
               :base-directory "~/Projects/blog/images"
               :base-extension "jpg\\|gif\\|png"
               :publishing-directory "/ssh:friskbris.no:/var/www/zmalltalker.com/images/"
               :publishing-function org-publish-attachment)
  ))
    
    (global-set-key (kbd "C-x p") 'org-publish-current-project)
    
#+end_src

   And then we definitely want to use htmlize, as this will do
   wonderful things to source code in org files. It's distributed with
   orgmode, but we'll need to load it.

#+begin_src emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "/src/org-mode/contrib/lisp"))
(require 'htmlize)
#+end_src

   In order to fontify RPM specs, I'll need this baby
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/")
(autoload 'rpm-spec-mode "rpm-spec-mode.el" "RPM spec mode." t)
(require 'rpm-spec-mode)
#+end_src
** YAML mode

   YAML is ... should we say *picky*? ... to edit by hand. Indentation
   matters a lot, and syntax highlighting is a great help. 

   Let's get some help:

#+begin_src emacs-lisp
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+end_src


** Packages

   Emacs 24 ships with a package system, which is great. 
   Let's enable it:

#+begin_src emacs-lisp
(package-initialize)
#+end_src 

   and add some more repositories:

#+begin_src emacs-lisp
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
#+end_src

** Magnar's awesome Magit setup
   Magit. I was skeptical at first, but then I just ... yum. 
   Let's load it

#+begin_src emacs-lisp
(require 'magit)
(add-to-list 'load-path "/home/marius/.emacs.d/extras")
#+end_src

   Magnar (or Christian?) shared some customizations for Magit
   that make it even better:

#+begin_src emacs-lisp
(require 'setup-magit) 
#+end_src

   I use C-x m for starting magit
   
#+begin_src emacs-lisp
(global-set-key (kbd "C-x m") 'magit-status)
#+end_src

** Recent files
   Support open-recent-file. This needs some work.

#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
#+end_src
   

** Theme
   Emacs 24 has built-in theming support. 

   I'm using the solarized-dark theme right now. It's really easy on
   my eyes and pretty as well. This theme is installed using Emacs'
   package manager, so solarized would be in elpa/solarized-theme-0.5.0.
   To install a theme, use package-install.

#+begin_src emacs-lisp
(load-theme 'solarized-dark t)
#+end_src

** Run tests from Emacs
   This is currently a wish list
  - [X] find .rvmrc
  - [X] set correct ruby
  - [X] run $ruby -Ilib:test <project_root>/path
  - [ ] compile
* My Emacs installation
  My OS (Fedora 17) ships with Emacs 24 (doesn't yours?). Sadly this
  version doesn't work 100% with all of the orgmode features, either
  because it's a prerelease version or because it's poorly built.

  Whenever I try to run org-export, I get an error along the lines of
  "cannot find library org"; trying to resolve this by altering
  org-mode just seems to make matters worse.

  Because of this I have built and installed emacs 24.1 from source,
  and then used the alternatives system to swap the default Emacs
  installation with my own.

  I used [[http://jonebird.com/2011/12/29/installing-emacs-v24-on-fedora/][this recipe]] to install the required packages for building
  emacs, installed my custom emacs into a non-standard location
  (/usr/local/emacs24) and used alternatives to swap emacs
  implementation. 


** Keeping files in sync is tricky

   By default, Emacs will not update the contents of open buffers when
   a file changes on disk. This is inconvenient when switching
   branches in Git - as you'd risk editing stale buffers. 

   This problem can be solved

#+begin_src emacs-lisp
(global-auto-revert-mode)
#+end_src
   

** Misc stuff
   
   I'm lazy, didn't find a place to put this yet.
   - Use ruby-mode for Rakefiles
   - Bind C-x / to comment-or-uncomment-region

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
#+end_src
   

** Other (contributed) libraries
*** Expand region
    Lets you do wonderful things with regions.
#+begin_src emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "contrib/expand-region"))
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

*** rvm
    Use a usable ruby
#+begin_src emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "contrib/rvm.el"))
(require 'rvm)
#+end_src
