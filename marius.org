#+TITLE:     marius.org
#+AUTHOR:    Marius Mathiesen
#+EMAIL:     zmalltalker@zmalltalker.com
#+DATE:      2012-07-06 Fri
#+DESCRIPTION: My emacs configuration
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

* Dot emacs, literate style

  This file is loaded from init.el after any .org files in extras/
  This is because we want to be able to use libraries from there from this file.

** Yasnippet
   My home boy thomanil is watching over my shoulder as I install
   Yasnippet for the umteenth time. Let's see:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elpa/yasnippet-0.8.0")
  (require 'yasnippet)
  (yas/global-mode t)
  (yas/load-directory "~/.emacs.d/snippets")
  (setq yas/global-mode t)
#+END_SRC

   I'm not sure I'll keep this, but let's keep the man happy.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-set-local 'yas/trigger-key [tab])
              (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))

  (defun yas/org-very-safe-expand ()
    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

  (add-hook 'org-mode-hook
            (lambda ()
              (make-variable-buffer-local 'yas/trigger-key)
              (setq yas/trigger-key [tab])
              (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              (define-key yas/keymap [tab] 'yas/next-field)))

#+END_SRC
** Ido
    Ido improves all kind of minibuffer activities:
    - find-file
    - switch-buffer

    with case-insensitivity and all kinds of wonderful things. Let's
    load it up:

#+begin_src emacs-lisp
(load-library "ido")
(ido-mode)
#+end_src

*** Jump to symbol support
    Jump to a symbol (function, class etc.) with completion.
    No textmate required

#+begin_src emacs-lisp
(defun ido-goto-symbol (&optional symbol-list)
      "Refresh imenu and jump to a place in the buffer using Ido."
      (interactive)
      (unless (featurep 'imenu)
        (require 'imenu nil t))
      (cond
       ((not symbol-list)
        (let ((ido-mode ido-mode)
              (ido-enable-flex-matching
               (if (boundp 'ido-enable-flex-matching)
                   ido-enable-flex-matching t))
              name-and-pos symbol-names position)
          (unless ido-mode
            (ido-mode 1)
            (setq ido-enable-flex-matching t))
          (while (progn
                   (imenu--cleanup)
                   (setq imenu--index-alist nil)
                   (ido-goto-symbol (imenu--make-index-alist))
                   (setq selected-symbol
                         (ido-completing-read "Symbol? " symbol-names))
                   (string= (car imenu--rescan-item) selected-symbol)))
          (unless (and (boundp 'mark-active) mark-active)
            (push-mark nil t nil))
          (setq position (cdr (assoc selected-symbol name-and-pos)))
          (cond
           ((overlayp position)
            (goto-char (overlay-start position)))
           (t
            (goto-char position)))))
       ((listp symbol-list)
        (dolist (symbol symbol-list)
          (let (name position)
            (cond
             ((and (listp symbol) (imenu--subalist-p symbol))
              (ido-goto-symbol symbol))
             ((listp symbol)
              (setq name (car symbol))
              (setq position (cdr symbol)))
             ((stringp symbol)
              (setq name symbol)
              (setq position
                    (get-text-property 1 'org-imenu-marker symbol))))
            (unless (or (null position) (null name)
                        (string= (car imenu--rescan-item) name))
              (add-to-list 'symbol-names name)
              (add-to-list 'name-and-pos (cons name position))))))))
#+end_src

** Emacs server mode
   Let's support emacsclient. For that to work, we'll need to start the server.
   Unless, of course, it's already running

#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p) (server-start))
#+end_src

** Blogging from org
   Apparently, we need to set up the project list

#+begin_src emacs-lisp
      (setq org-publish-project-alist
            '(("blogg"
               :base-directory "/home/marius/Projects/blog/orgfiles"
               :publishing-directory "/home/marius/Projects/blog/output"
               :headline-levels 3
               :recursive t
               :table-of-contents nil
               :html-preamble nil
               :html-postamble nil
               :body-only t
               :section-numbers nil
               :auto-sitemap t
               )
              ("images"
               :base-directory "~/Projects/blog/images"
               :base-extension "jpg\\|gif\\|png"
               :publishing-directory "/ssh:friskbris.no:/var/www/zmalltalker.com/images/"
               :publishing-function org-publish-attachment)
  ))
#+end_src

   Let's bind =C-x p= to =org-publish-current-project=
#+begin_src emacs-lisp
    (global-set-key (kbd "C-x p") 'org-publish-current-project)
#+end_src

   Org-mode produces some quite nasty HTML, and I use Twitter
   Bootstrap to mark up my code, so I want to use different tags from
   the defaults.

   Because of this I export the body part only, and run a Rake task
   which uses ERB to generate a full HTML page afterwards. I'm adding
   a hook that's run after publishing; this will generate any updated
   HTML files and publish it to my website.

#+begin_src emacs-lisp
  (add-hook 'org-publish-after-export-hook (lambda ()
                                             (shell-command "cd ~/Projects/blog && rake deploy")))

#+end_src

   And then we definitely want to use htmlize, as this will do
   wonderful things to source code in org files. It's distributed with
   orgmode, but we'll need to load it.

#+begin_src emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "/src/org-mode/contrib/lisp"))
(require 'htmlize)
#+end_src

   In order to fontify RPM specs, I'll need this baby
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/")
(autoload 'rpm-spec-mode "rpm-spec-mode.el" "RPM spec mode." t)
(require 'rpm-spec-mode)
#+end_src

   Does fontified Smalltalk sound good? Let's do it!

#+begin_src emacs-lisp
(require 'smalltalk-mode)
#+end_src

** YAML mode

   YAML is ... should we say *picky*? ... to edit by hand. Indentation
   matters a lot, and syntax highlighting is a great help.

   Let's get some help:

#+begin_src emacs-lisp
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+end_src


** Packages

   Emacs 24 ships with a package system, which is great.
   Let's enable it:

#+begin_src emacs-lisp
(package-initialize)
#+end_src

   and add some more repositories:

#+begin_src emacs-lisp
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
#+end_src

** Magnar's awesome Magit setup
   Magit. I was skeptical at first, but then I just ... yum.
   Let's load it

#+begin_src emacs-lisp
(require 'magit)
(add-to-list 'load-path "/home/marius/.emacs.d/extras")
#+end_src

   Magnar (or Christian?) shared some customizations for Magit
   that make it even better:

#+begin_src emacs-lisp
(require 'setup-magit)
#+end_src

   I use C-x m for starting magit

#+begin_src emacs-lisp
(global-set-key (kbd "C-x m") 'magit-status)
#+end_src

** Recent files
   Support open-recent-file. This needs some work.

#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
#+end_src

   I just copied something awesome off the Internet! It's a function
   that does an ido-complete of the recently open files.

#+BEGIN_SRC emacs-lisp
  (defun recentf-interactive-complete ()
    "find a file in the recently open file using ido for completion"
    (interactive)
    (let* ((all-files recentf-list)
           (file-assoc-list (mapcar (lambda (x) (cons (file-name-nondirectory x) x)) all-files))
           (filename-list (remove-duplicates (mapcar 'car file-assoc-list) :test 'string=))
           (ido-make-buffer-list-hook
            (lambda ()
              (setq ido-temp-list filename-list)))
           (filename (ido-read-buffer "Find Recent File: "))
           (result-list (delq nil (mapcar (lambda (x) (if (string= (car x) filename) (cdr x))) file-assoc-list)))
           (result-length (length result-list)))
      (find-file
       (cond
        ((= result-length 0) filename)
        ((= result-length 1) (car result-list))
        ( t
          (let ( (ido-make-buffer-list-hook
                  (lambda ()
                    (setq ido-temp-list result-list))))
            (ido-read-buffer (format "%d matches:" result-length))))
        ))))
#+END_SRC

   Now let's map this baby to C-x C-g:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-g") 'recentf-interactive-complete)
#+END_SRC
** Theme
   Emacs 24 has built-in theming support.

   I'm using the solarized-dark theme right now. It's really easy on
   my eyes and pretty as well. This theme is installed using Emacs'
   package manager, so solarized would be in elpa/solarized-theme-0.5.0.
   To install a theme, use package-install.

#+begin_src emacs-lisp
(load-theme 'solarized-dark t)
#+end_src

** Run tests from Emacs
   This is currently a wish list
  - [X] find .rvmrc
  - [X] set correct ruby
  - [X] run $ruby -Ilib:test <project_root>/path
  - [ ] compile
** Mark text and delete/replace immediately
   You know how other editors will let you select text and then start
   typing right away to replace it? You know how you need to remove
   this from your muscle memory when using Emacs? No more

#+begin_src emacs-lisp
(delete-selection-mode)
#+end_src
** Ascii art to Unicode
   Convert simple ASCII art drawings (and org-tables) to beautiful
   Unicode.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "/contrib"))
(require 'ascii-art-to-unicode)
#+END_SRC
** More org exporters (Org > 7.9)
   Org's =contrib/lisp= contains a lot of new exporters.
#+BEGIN_SRC emacs-lisp
(require 'org-export)
#+END_SRC

   Markdown is an inferior format, and can be generated.
#+BEGIN_SRC emacs-lisp
(require 'org-md)
#+END_SRC

   Generating man pages? Great idea.

#+BEGIN_SRC emacs-lisp
(require 'org-e-man)
#+END_SRC

   Oh yeah, and ascii

#+BEGIN_SRC emacs-lisp
(require 'org-e-ascii)
#+END_SRC
** Speed commands in org
   With speed commands enabled, I can enter single-letter commands
   when the cursor is at the very beginning of a headline. =?=
   displays a menu

#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
#+END_SRC
** Trailing whitespace
   Removing trailing whitespace on save should be on by default. I've
   been looking like a clueless moron

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Code cleanup
   In order to have really neat source code, it sounds like a good
   idea to have a single keystroke for cleaning up a file.

   #+BEGIN_SRC emacs-lisp
     (defun zmalltalker-clean-up-everything ()
       "Perform housekeeping on the current buffer"
       (interactive)
       (save-excursion
         (whitespace-cleanup)
         (mark-whole-buffer)
         (indent-region (point) (mark))
         )
       )
   #+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c n") 'zmalltalker-clean-up-everything)
#+END_SRC
** Rinari
   No fucking way. I'm leaving this trail behind just to remind me not
   to do this again.
** Email setup
   I'm playing with Mutt as my MUA (with offlineimap for sync and
   msmtp for sending mail). It's awesome.

   I put "set editor=emacsclient -c" in my ~/.muttrc, which makes
   emacsclient open a new graphical frame when I compose/reply
   to/forward a message.

   Set up mail mode when viewing a mutt buffer
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("/mutt" . mail-mode))
#+END_SRC

   And of course I want auto-fill when writing email, and I want to
   bind C-c C-c to server-edit, which finishes the editing session
#+BEGIN_SRC emacs-lisp
  (defun zmalltalker-mail-mode-hook ()
    (auto-fill-mode 1)
    (local-set-key (kbd "C-c C-c")  (lambda ()
           (interactive)
           (save-buffer)
           (server-edit))))




  (add-hook 'mail-mode-hook 'zmalltalker-mail-mode-hook)
#+END_SRC
** Multiple cursors
   This makes me look as cool as Magnar.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat dotfiles-dir "/contrib/multiple-cursors"))
  (require 'multiple-cursors)
  ;; Select next/previous/all places like the current
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

  (global-set-key (kbd "C-S-c C-e") 'mc/edit-ends-of-lines)
  (global-set-key (kbd "C-S-c C-a") 'mc/edit-beginnings-of-lines)
#+END_SRC
** Goto line with feedback
   M-g M-g is kind of boring; it could be helpful to turn on line
   numbers while the prompt is being displayed. Here we go.

#+BEGIN_SRC emacs-lisp
  ;; turn line numbers off by default
  (global-linum-mode -1)

  (defun goto-line-with-feedback (&optional line)
    "Show line numbers temporarily, while prompting for the line number input"
    (interactive "P")
    (if line
        (goto-line line)
      (unwind-protect
          (progn
            (linum-mode 1)
            (goto-line (read-number "Goto line: ")))
        (linum-mode -1))))
  (global-set-key (vector 'remap 'goto-line) 'goto-line-with-feedback)

#+END_SRC
** Mu4e
   Trying out [[http://www.djcbsoftware.nl/code/mu/mu4e/index.html][mu4e]] for my email. Mu is a search engine for Maildir
   email, and relies on my existing toolchain for email:
   - Offlineimap for imap
   - msmtp to send mail.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat dotfiles-dir "contrib/mu4e"))
  (require 'mu4e)
  (setq mu4e-get-mail-command "offlineimap")
  (setq mu4e-drafts-folder "/Gitorious/drafts")
  (setq user-mail-address "marius@gitorious.com")
  (setq message-kill-buffer-on-exit t)

  ;; Shortcuts
  (setq mu4e-maildir-shortcuts
        '(("/Gitorious/inbox" . ?g)
          ("/Gmail/inbox" . ?z)
          ("/Shortcut/inbox" . ?s)
          ("/Gmail/gitorious-ml" . ?m)
          ))

  ;; Smart refile locations
      (setq mu4e-refile-folder
         (lambda (msg)
           (cond
             ;; messages sent directly to me go to /archive
             ;; also `mu4e-user-mail-address-regexp' can be used
             ((mu4e-message-contact-field-matches msg :to "marius@gitorious")
               "/Gitorious/archive")
             ((mu4e-message-contact-field-matches msg :to "marius.mathiesen@gmail.com")
               "/Gmail/archive")
             ((mu4e-message-contact-field-matches msg :to "zmalltalker@zmalltalker.com")
               "/Gmail/archive")
             ((mu4e-message-contact-field-matches msg :to "marius@shortcut.no")
               "/Shortcut/archive")
             ;; everything else goes to /archive
             ;; important to have a catch-all at the end!
             (t  "/Gmail/archive"))))

  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)


  ;; Try to display images in mu4e
  (setq
   mu4e-view-show-images t
   mu4e-view-image-max-width 800)

  ;; sending mail
  (setq message-send-mail-function 'message-send-mail-with-sendmail
        sendmail-program "/usr/bin/msmtp"
        user-full-name "Marius Mårnes Mathiesen")


  (setq mu4e-confirm-quit nil
        mu4e-headers-date-format "%d/%b/%Y %H:%M" ; date format
        mu4e-html2text-command "html2text -utf8 -width 72"
  )

  ;; Borrowed from http://ionrock.org/emacs-email-and-mu.html
  ;; Choose account label to feed msmtp -a option based on From header
  ;; in Message buffer; This function must be added to
  ;; message-send-mail-hook for on-the-fly change of From address before
  ;; sending message since message-send-mail-hook is processed right
  ;; before sending message.
  (defun choose-msmtp-account ()
    (if (message-mail-p)
        (save-excursion
          (let*
              ((from (save-restriction
                       (message-narrow-to-headers)
                       (message-fetch-field "from")))
               (account
                (cond
                 ((string-match "marius.mathiesen@gmail.com" from) "gmail")
                 ((string-match "zmalltalker@zmalltalker.com" from) "gmail")
                 ((string-match "marius@shortcut.no" from) "shortcut")
                 ((string-match "marius@gitorious.com" from) "gitorious")
                 ((string-match "marius@gitorious.org" from) "gitorious"))))
            (setq message-sendmail-extra-arguments (list '"-a" account))))))
  (setq message-sendmail-envelope-from 'header)
  (add-hook 'message-send-mail-hook 'choose-msmtp-account)
  (add-to-list 'mu4e-bookmarks
               '("maildir:/Gitorious/inbox OR maildir:/Shortcut/inbox OR maildir:/Gmail/inbox flag:unread" "Today's news" ?z))
  (add-to-list 'mu4e-bookmarks
               '("maildir:/Gmail/gitorious-ml flag:unread" "Unread on the mailing list" ?m))

#+END_SRC
*** Dynamic sender addresses
    When replying to an email I want to use the address I received
    this message to as the sender of the reply. This is fairly trivial:

#+BEGIN_SRC emacs-lisp
  (add-hook 'mu4e-compose-pre-hook
         (defun my-set-from-address ()
           "Set the From address based on the To address of the original."
           (let ((msg mu4e-compose-parent-message)) ;; msg is shorter...
             (setq user-mail-address
                   (cond
                    ((mu4e-message-contact-field-matches msg :to "@gitorious")
                     "marius@gitorious.com")
                    ((mu4e-message-contact-field-matches msg :to "marius@shortcut.no")
                     "marius@shortcut.no")
                    ((mu4e-message-contact-field-matches msg :to "marius.mathiesen@gmail.com")
                     "zmalltalker@zmalltalker.com")
                    ((mu4e-message-contact-field-matches msg :to "zmalltalker@zmalltalker.com")
                     "zmalltalker@zmalltalker.com")
                    (t "marius.mathiesen@gmail.com"))))))
#+END_SRC
*** Attaching files from dired
    Wouldn't it be awesome to be able to send files from dired using
    your mail client?

    I'll need a special version of the
    gnus-dired-mail-buffers function so it understands mu4e buffers as
    well:

#+BEGIN_SRC emacs-lisp
  (require 'gnus-dired)
  ;; make the `gnus-dired-mail-buffers' function also work on
  ;; message-mode derived modes, such as mu4e-compose-mode
  (defun gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                     (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))

  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_SRC

    With this, I can attach a file as an attachment to a new email
    message by entering =C-c RET C-a=, and I'm good to go.

* My Emacs installation
  My OS (Fedora 17) ships with Emacs 24 (doesn't yours?). Sadly this
  version doesn't work 100% with all of the orgmode features, either
  because it's a prerelease version or because it's poorly built.

  Whenever I try to run org-export, I get an error along the lines of
  "cannot find library org"; trying to resolve this by altering
  org-mode just seems to make matters worse.

  Because of this I have built and installed emacs 24.1 from source,
  and then used the alternatives system to swap the default Emacs
  installation with my own.

  I used [[http://jonebird.com/2011/12/29/installing-emacs-v24-on-fedora/][this recipe]] to install the required packages for building
  emacs, installed my custom emacs into a non-standard location
  (/usr/local/emacs24) and used alternatives to swap emacs
  implementation.


** Keeping files in sync is tricky

   By default, Emacs will not update the contents of open buffers when
   a file changes on disk. This is inconvenient when switching
   branches in Git - as you'd risk editing stale buffers.

   This problem can be solved

#+begin_src emacs-lisp
(global-auto-revert-mode)
#+end_src


** Misc stuff

   I'm lazy, didn't find a place to put this yet.
   - Use ruby-mode for Rakefiles
   - Use ruby-mode for Gemfiles
   - Bind C-x / to comment-or-uncomment-region

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rake$" . ruby-mode))
#+end_src


** Other (contributed) libraries
*** Expand region
    Lets you do wonderful things with regions.
#+begin_src emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "contrib/expand-region"))
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

*** rvm
    Use a usable ruby
#+begin_src emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "contrib/rvm.el"))
(require 'rvm)
#+end_src

*** Puppet-mode
    We need puppet-mode for puppet manifests
#+begin_src emacs-lisp
(require 'puppet-mode)
(add-to-list 'auto-mode-alist '("\\.pp$" . puppet-mode))
#+end_src
** Gitorious stuff
   I'm working on an Emacs thing for merge requests.
#+begin_src emacs-lisp
(require 'merge-requests)
#+end_src
